<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-04T09:43:42.192Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/03/04/UE_Advanced%20ARPG%20Melee%20Combat%20System%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/04/UE_Advanced%20ARPG%20Melee%20Combat%20System%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-04T09:43:56.128Z</published>
    <updated>2022-03-04T09:43:42.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CharacterStateManagerComponent"><a href="#CharacterStateManagerComponent" class="headerlink" title="CharacterStateManagerComponent"></a>CharacterStateManagerComponent</h3><p><strong>Function</strong></p><ul><li>SetAction(设置动作，不包括动画)</li><li>SetState</li></ul><p><strong>Event</strong></p><ul><li>Action Begin (在设置动作开始时触发，主要包括镜头等处理)</li><li>Action End</li></ul><h3 id="MontageManagerComponent"><a href="#MontageManagerComponent" class="headerlink" title="MontageManagerComponent"></a>MontageManagerComponent</h3><p><strong>Function</strong></p><ul><li>GetGeneralActionMontage</li><li>SetState</li></ul><h3 id="CollisionComponent"><a href="#CollisionComponent" class="headerlink" title="CollisionComponent"></a>CollisionComponent</h3><p><strong>Event</strong></p><ul><li>OnCollisionEnable （打开碰撞检测，触发CollisionTrace事件）</li><li>CollisionTrace （循环检测碰撞直到EnableCollisionTrace被设置成false，循环期间根据碰撞信息触发OnHit事件，OnHit事件的具体逻辑由角色蓝图进行控制）</li></ul><h4 id="InputBufferNS-AnimNotifyState"><a href="#InputBufferNS-AnimNotifyState" class="headerlink" title="InputBufferNS:  AnimNotifyState"></a>InputBufferNS:  AnimNotifyState</h4><p>该类配合动画Montage中的Nofities来控制特定动作时间内才允许接受玩家输入</p><p><strong>Function</strong></p><ul><li>Received_NotifyBegin</li><li>Received_NotifyEnd</li></ul><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/2.png" alt="image-20211227155216998"></p><p>攻击动画蒙太奇的配置</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/3.png" alt="image-20211227165119510"></p><p>InputBufferNS控制玩家输入缓存</p><h4 id="AttackTraceNS：AnimNotifyState"><a href="#AttackTraceNS：AnimNotifyState" class="headerlink" title="AttackTraceNS：AnimNotifyState"></a>AttackTraceNS：AnimNotifyState</h4><p>该类配合动画Montage中的Nofities来控制攻击过程中的碰撞体</p><p><strong>Function</strong></p><ul><li>Received_NotifyBegin</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）根据类型执行相关逻辑</span><br><span class="line">（2）如果是武器，获取当前武器和武器碰撞体的相关信息，调用武器CollisionComponent中的Enable Collision事件（开启碰撞检测，清除之前的碰撞信息）</span><br><span class="line">（3）如果是四肢，打开四肢的碰撞体</span><br><span class="line">（4）如果是盾牌，打开盾牌的碰撞体</span><br></pre></td></tr></table></figure><ul><li>Received_NotifyEnd(关闭碰撞体)</li></ul><p><strong>攻击动画蒙太奇的整体流程：</strong></p><p>初始化过程中就会将主角Actor中的碰撞体引用绑定到Collision Component上</p><ul><li>（1）动画蒙太奇配置AttackTraceNS(AnimNotifyState)，Received_NotifyBegin调用角色实现的CombatBPI接口存储此次攻击信息（Update Attack Info），同时打开武器碰撞体检测，打开期间根据循环检测是否碰撞</li><li>（2）检测通过MultiSphereTraceForObject函数，将检测结果放入HItActors数组中</li><li>（3）处理碰撞结果，调用OnHit事件，主要是根据碰撞信息和人物攻击力等数值信息播放受击动画、特效，造成伤害等</li><li>（4）AttackTraceNS的Received_NotifyEnd关闭武器碰撞体</li></ul><p>AI的攻击蒙太奇主要靠Attack_Trace_AI实现</p><p><strong>碰撞检测造成伤害流程</strong></p><p>攻击蒙太奇中开启碰撞检测，产生碰撞结果后会调用当前持有Collision Componet的Actor的On Hit事件，</p><p>武器的On Hit事件</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/4.png" alt="image-20211230150356776"></p><p>如果被击中的Actor是Pawn，则执行<strong>Try to Apply Damge</strong>（在服务端运行，Try to Apply Damge中根据武器的自身设置和持有武器的Actor调用UE中自带的Actor伤害系统（Apply Damage函数）），然后调用持有武器Actor 的On Hit事件。</p><p>如果Actor不是Pawn则调用武器持有者的On Hit事件</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/5.png" alt="image-20211230152953540"></p><p>主角Actor的On Hit事件会调用<strong>On Melee Hit</strong>事件：</p><ul><li><p>获取动画蒙太奇中配置的Attack Info</p></li><li><p>获取被攻击者的Hit React Component</p></li><li><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/6.png"></p><p><strong>Make Combat Hit Data</strong>中计算两者距离、攻击方向、调用受击者的Get Impact Decision得到当前是否格挡，<strong>Store CombitHit Data</strong>将受击信息（CombatHitData_Struct）存储到受击者的Hit Reaction Component中，后面的受击者的伤害计算、受击反馈等需要使用该数据</p></li><li><p>在被攻击者的Hit React Component的设置碰撞信息，包括碰撞骨骼，碰撞位置等</p></li><li><p>伤害计算后攻击者通过Apply Damage传递攻击的相关数据，被攻击者接收Event AnyDamage事件处理伤害<img src="https://gitee.com/nevermorec/photo-store/raw/master/All/7.png" alt="image-20211230171903467"></p></li><li><p>调用被攻击者Hit React Component播放受击动画、特效等</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/8.png" alt="image-20220113190346003"></p></li></ul><p><strong>普攻连击流程：</strong></p><p>MontageComponent中的DataTable中引用了CombatMontagesDataTable，该表格存储了一套动作连招的所有蒙太奇。</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/9.png" alt="image-20211230115943728"></p><p>执行普通攻击的入口：</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/10.png" alt="image-20211230114554643"></p><p>Attack Type类型包括Light attack、strong attack等枚举类型</p><ul><li>设置CombatComponet中的attack type</li><li>设置CharacterStateManager中的Action(这里是Attack，CharacterStateManager会处理新旧Action切换的一些行为)</li><li>设置CharacterStateManager中的State(这里是Attacking，CharacterStateManager会处理新旧State切换的一些行为)</li><li>清除ResetAttackHandle计时器（计时器的作用是重置当前的Attack Count，这里的清除作用是允许角色继续连击，增加Attack Count）</li><li>根据Attack Type和Attack Index获取要执行的蒙太奇</li><li>Inform AI  of An Attack通知相关AI角色要执行的动作，供AI后续执行自己的处理</li><li>播放动画蒙太奇</li><li>Attack Count++，如果Attack Count没有被重置下次执行Perform Attack则会索引到下一个配置好的蒙太奇动画</li><li>设置重置Attack Count的定时器（demo这里设置为蒙太奇时间*0.8）</li><li>检测蒙太奇是否播放成功，成功则执行StatsComponent中的Modify Current Stat Value扣除法力，耐力等逻辑</li></ul><p>ARPG的连击方法：</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/11.png" alt="image-20220113191554301"></p><p>JumpSectionNS 期间内可以连击， JumpSections 存储了可以跳转的Section</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/12.png" alt="image-20220113201350324"></p><p>期间在此触发相同普攻，会依据 JumpSections设置的 JumpSections来跳转到指定section。</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/13.png" alt="image-20220113201941101"></p><p><strong>基础设定</strong></p><p>Character State：</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/14.png" alt="image-20211230145253302"></p><p>Character Action：</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/15.png" alt="image-20211230145345422"></p><p><strong>Get General Action Montage</strong>：</p><p>得到当前要播放的蒙太奇动画</p><p>每次更新武器会替换当前的Switch weapon的蒙太奇动画</p><p>蒙太奇动画管理：</p><p>不同武器之间对应不同的蒙太奇动画，需要在切换武器时切换当前角色的蒙太奇动画</p><p><strong>CombatMontagesDataTable</strong>数据表中存储了不同武器下的蒙太奇动画（装备武器、攻击、翻滚动作、受击反馈动画等等）</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/16.png"></p><p>当触发EquipmentManagerComponent中的OnCombatTypeChange事件（武器该表）时，调用MonatgeManagerComponent中的UpdateMontage函数处理蒙太奇动画的更新。</p><p>多角色蒙太奇配合：</p><p>以暗杀为例，暗杀需要两个角色配合表演完整的暗杀动画。</p><p>暗杀者通过向前的碰撞检测敌人，如果有敌人检查是否满足暗杀条件，条件成功执行暗杀，并且将被暗杀者的背板值General AI State设置为Assasinated，通过被暗杀者的行为树控制表演被杀动画。</p><p><strong>AI</strong></p><p>AI的行为树分为一下几个部分：</p><ul><li>进入战斗（播放装备武器动画、修改General AI State）</li><li>退出战斗</li><li>巡逻</li><li>战斗</li></ul><p>服务节点：BTS_AIDecisionMaker，</p><p>战斗子行为树的实现：</p><p>服务节点：BTS_TrackPlayerState，该服务设置当前角色的AI Action，包括Attack、Block、Dodge、Hit等，叶子节点负责执行对应的AI Action</p><p>攻击Task节点：根据BTS_AIDecisionMaker设置的攻击方式进行攻击</p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>继承SaveGame，在类中自定义需要存储的数据</p><p>在GameInstance中新建变量CurSavedGame，变量类型是上面的类</p><p><strong>载入数据</strong>：</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/17.png" alt="image-20220124095618894"></p><p><strong>保存数据到文件：</strong></p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/18.png" alt="image-20220124095715901"></p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/19.png" alt="image-20220124095749898"></p><p>Save Game to Slot会创建一个(Slot Name).sav的文件，本地保存路径为Saved&#x2F;SavedGame&#x2F;(Slot Name).sav</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CharacterStateManagerComponent&quot;&gt;&lt;a href=&quot;#CharacterStateManagerComponent&quot; class=&quot;headerlink&quot; title=&quot;CharacterStateManagerComponent&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/03/04/Unity%20IK%E8%84%9A%E4%BF%9D%E6%8C%81%E5%A7%8B%E7%BB%88%E5%9C%A8%E5%9C%B0%E9%9D%A2/"/>
    <id>http://example.com/2022/03/04/Unity%20IK%E8%84%9A%E4%BF%9D%E6%8C%81%E5%A7%8B%E7%BB%88%E5%9C%A8%E5%9C%B0%E9%9D%A2/</id>
    <published>2022-03-04T09:36:38.199Z</published>
    <updated>2022-03-04T09:36:01.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unity时间函数执行顺序"><a href="#Unity时间函数执行顺序" class="headerlink" title="Unity时间函数执行顺序"></a>Unity时间函数执行顺序</h2><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/All/1.png"></p><p>上图是Unity中部分时间函数的执行顺序，大致是Update()、协程事件、动画事件、LateUpdate()，在使用IK过程中需要注意事件函数的更新顺序，不然修改的数据很可能无效。例如如果在Update中修改人体关节的位置，会因为动画事件的关节位置再次修改而导致之前的修改无效，所以更新人体关节的操作可以放在LateUpate中。</p><h2 id="脚部IK的实现思路"><a href="#脚部IK的实现思路" class="headerlink" title="脚部IK的实现思路"></a>脚部IK的实现思路</h2><p>脚部IK主要控制角色脚的Position和Rotaion</p><ul><li>（1）通过射线检测计算左右脚离地距离、地面法线、地面位置</li><li>（2）判断脚是否接触地面（或者在地面以下），接触地面的脚需要使用地面法线、地面位置来修改脚部IK</li><li>（3）如果是单脚接触地面的情况，需要下移臀部使得另一只脚也能够尽可能的在地面上</li></ul><p>IK的位置需要在OnAnimatorIK中设置，臀部关节的设置需要在LateUpdate中；</p><p>为了避免脚趾穿模，可以增加一些射线检测来避免；</p><p>为了更好的移动效果，臀部关节的偏移可以加上插值</p><h4 id="脚部IK的实现代码"><a href="#脚部IK的实现代码" class="headerlink" title="脚部IK的实现代码"></a>脚部IK的实现代码</h4><p>参考UTPM实现了一个脚步IK的功能</p><ul><li>数据</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Transform m_Transform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Transform m_Hips;</span><br><span class="line"><span class="keyword">private</span> Vector3 m_HipsLocalPosition;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> m_HipsOffset;</span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span>[] groundDistance = <span class="keyword">new</span> <span class="built_in">float</span>[<span class="number">2</span>]; <span class="comment">// 地面距离</span></span><br><span class="line">Vector3[] groundPoint = <span class="keyword">new</span> Vector3[<span class="number">2</span>]; <span class="comment">// 地面接触点</span></span><br><span class="line">Vector3[] groundNormal = <span class="keyword">new</span> Vector3[<span class="number">2</span>]; <span class="comment">// 射线检测法线</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField</span>] </span><br><span class="line"><span class="keyword">protected</span> <span class="built_in">float</span> m_HipsPositionAdjustmentSpeed = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> player m_Player;</span><br><span class="line"><span class="keyword">public</span> FullBodyBipedIK ik;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="built_in">float</span> m_FootOffsetAdjustment = <span class="number">0.005f</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span>[] m_LegLength = <span class="keyword">new</span> <span class="built_in">float</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span>[] m_FootOffset = <span class="keyword">new</span> <span class="built_in">float</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> m_LayerMask;</span><br></pre></td></tr></table></figure><ul><li>AnimatorIk</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnAnimatorIK</span>(<span class="params"><span class="built_in">int</span> layerIndex</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HandleLowerIK();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleLowerIK</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> hipsOffset = m_Player.c_ColliderSpacing;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算地面距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 legPos = (i == <span class="number">0</span>) ? ik.references.leftCalf.position : ik.references.rightCalf.position;</span><br><span class="line">        Vector3 feetPos = (i == <span class="number">0</span>) ? ik.references.leftFoot.position : ik.references.rightFoot.position;</span><br><span class="line">        <span class="keyword">var</span> raycastStartPoint = GetFootRaycastPosition(feetPos, legPos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> m_RaycastHit = <span class="keyword">new</span> RaycastHit();</span><br><span class="line">        <span class="keyword">if</span> (Physics.Raycast(raycastStartPoint, -m_Transform.up, <span class="keyword">out</span> m_RaycastHit, </span><br><span class="line">                            <span class="number">2</span> * m_LegLength[i] + m_FootOffset[i] + m_FootOffsetAdjustment, m_LayerMask, QueryTriggerInteraction.Ignore))</span><br><span class="line">        &#123;</span><br><span class="line">            groundDistance[i] = m_RaycastHit.distance;</span><br><span class="line">            groundPoint[i] = m_RaycastHit.point;</span><br><span class="line">            groundNormal[i] = m_RaycastHit.normal;</span><br><span class="line"></span><br><span class="line">            UpdateHipsOffset(groundDistance[i], i, <span class="keyword">ref</span> hipsOffset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> groundDistance[i] = <span class="built_in">float</span>.MaxValue;</span><br><span class="line"></span><br><span class="line">        Debug.DrawLine(raycastStartPoint, groundPoint[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Smoothly position the hips.</span></span><br><span class="line">    <span class="keyword">if</span> (m_Player.CheckGround()) </span><br><span class="line">        m_HipsOffset = Mathf.Lerp(m_HipsOffset, hipsOffset, m_HipsPositionAdjustmentSpeed * Time.deltaTime);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        m_HipsOffset = Mathf.Lerp(m_HipsOffset, <span class="number">0</span>, m_HipsPositionAdjustmentSpeed * Time.deltaTime);</span><br><span class="line">    m_HipsLocalPosition = m_Transform.InverseTransformPoint(m_Hips.position);</span><br><span class="line">    m_HipsLocalPosition.y -= m_HipsOffset;</span><br><span class="line"></span><br><span class="line">    HandleFootIK();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算地面检测的初始位置</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Vector3 <span class="title">GetFootRaycastPosition</span>(<span class="params">Vector3 feetPos, Vector3 legPos</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> raycastPosition = m_Transform.InverseTransformPoint(feetPos);</span><br><span class="line">    <span class="keyword">var</span> localHipPosition = m_Transform.InverseTransformPoint(legPos);</span><br><span class="line">    raycastPosition.y = localHipPosition.y;</span><br><span class="line">    <span class="keyword">var</span> result = m_Transform.TransformPoint(raycastPosition);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleFootIK</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// feet</span></span><br><span class="line">        Vector3 legPos = (i == <span class="number">0</span>) ? ik.references.leftCalf.position : ik.references.rightCalf.position;</span><br><span class="line">        <span class="keyword">var</span> footTargetPos = (i == <span class="number">0</span>) ? ik.references.leftFoot.position : ik.references.rightFoot.position;</span><br><span class="line">        <span class="keyword">var</span> footTargetRot = (i == <span class="number">0</span>) ? ik.references.leftFoot.rotation : ik.references.rightFoot.rotation;</span><br><span class="line">        <span class="keyword">var</span> feetIKWeight = <span class="number">0f</span>;</span><br><span class="line">        <span class="keyword">var</span> effector = (i == <span class="number">0</span>) ? ik.solver.leftFootEffector : ik.solver.rightFootEffector;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果脚接触地面，使用脚步IK</span></span><br><span class="line">        <span class="keyword">if</span> (groundDistance[i] != <span class="built_in">float</span>.MaxValue &amp;&amp; groundDistance[i] &gt; <span class="number">0</span> &amp;&amp; </span><br><span class="line">            m_Transform.InverseTransformDirection(footTargetPos - groundPoint[i]).y - m_FootOffset[i] - m_HipsOffset &lt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> localFootTargetPos = m_Transform.InverseTransformPoint(footTargetPos);</span><br><span class="line">            localFootTargetPos.y = m_Transform.InverseTransformPoint(groundPoint[i]).y;</span><br><span class="line">            footTargetPos = m_Transform.TransformPoint(localFootTargetPos) + m_Transform.up * (m_FootOffset[i]);</span><br><span class="line">            footTargetRot = Quaternion.LookRotation(Vector3.Cross(groundNormal[i], footTargetRot * -Vector3.right), m_Transform.up);</span><br><span class="line">            <span class="comment">//rotation = Quaternion.LookRotation(Vector3.Cross(m_GroundNormal[i], rotation * -Vector3.right), m_CharacterLocomotion.Up);</span></span><br><span class="line">            feetIKWeight = <span class="number">1f</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        effector.position = footTargetPos;</span><br><span class="line">        effector.positionWeight = feetIKWeight;</span><br><span class="line">        effector.rotation = footTargetRot;</span><br><span class="line">        effector.rotationWeight = feetIKWeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一只脚触地没设置臀部offset，使得另一只脚也能够触地</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateHipsOffset</span>(<span class="params"><span class="built_in">float</span> groundDistance, <span class="built_in">int</span> index, <span class="keyword">ref</span> <span class="built_in">float</span> hipsOffset</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (groundDistance != <span class="built_in">float</span>.MaxValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((groundDistance - m_LegLength[index] - m_FootOffset[index]) &gt; hipsOffset) </span><br><span class="line">        &#123;</span><br><span class="line">            hipsOffset = groundDistance - m_LegLength[index] - m_FootOffset[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>LateUpdate</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">m_Hips.position = m_Transform.TransformPoint(m_HipsLocalPosition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Unity时间函数执行顺序&quot;&gt;&lt;a href=&quot;#Unity时间函数执行顺序&quot; class=&quot;headerlink&quot; title=&quot;Unity时间函数执行顺序&quot;&gt;&lt;/a&gt;Unity时间函数执行顺序&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/03/04/Slate%E5%92%8C%E8%A1%8C%E4%B8%BA%E6%A0%91%E6%8E%A5%E5%85%A5/"/>
    <id>http://example.com/2022/03/04/Slate%E5%92%8C%E8%A1%8C%E4%B8%BA%E6%A0%91%E6%8E%A5%E5%85%A5/</id>
    <published>2022-03-04T09:25:07.876Z</published>
    <updated>2021-12-18T09:23:11.662Z</updated>
    
    <content type="html"><![CDATA[<p>Unity Slate插件是一个TimeLine编辑器。支持在时间轴上编辑镜头、Animation、音频、角色IK等各种功能，支持扩展各种自定义节点类型。同时对Node Canvas行为树的支持也非常友好，直接集成了向行为树发送事件节点。</p><p>Slate使用界面：</p><p><img src="C:\Users\huangyuancheng\AppData\Roaming\Typora\typora-user-images\image-20211214095943932.png" alt="image-20211214095943932"></p><p>通过添加Cutscene脚本即可编辑TimeLine，一个Slate Editor中可以同时存在多个组（Actor Group），Director为Slate自带的组，其余添加组的属性都带组名和GameObject。一个组内可同时存在多个轨道（Track），一个轨道是一个TImeLine，在TimeLine上可以编辑多个节点（Action Clip）,节点会在对应的时刻触发并执行对应函数。Action Clip为具体的行为片段。例如播放动画、播放特效、发送事件等功能</p><p>Slate支持自定义节点，只需要继承实现Action Clip，并且将节点添加到轨道上即可完成触发。</p><p>Slate的更新顺序为：</p><p>Group Enter -&gt; Track Enter -&gt; Clip Enter |   ··· Clip Update  ···   | Clip Exit -&gt; Track Exit -&gt; Group Exit</p><h2 id="Slate接入行为树"><a href="#Slate接入行为树" class="headerlink" title="Slate接入行为树"></a>Slate接入行为树</h2><p>行为树接入Slate主要需要实现：</p><ul><li>生成行为树的Task节点用于播放和暂停Slate</li><li>行为树和Slate的数据交互（可以通过黑板和事件交互）</li><li>序列化Slate数据</li></ul><p>下面以Node Canvas行为树为例，</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>客户端：</p><p>方案一可以直接将Cutscene脚本挂载到GameObject，通过序列化Prefab的方式序列化Slate数据。在行为树执行对应Slate Task时，播放Slate只需要初始化GameObject并且调用CutScene的Play方法即可。</p><p>方案二可以直接Cutscene的数据序列话成JSON、BSON等格式，运行时反序列化。</p><p>服务端：如果需要在服务端执行Slate的逻辑，需要在序列化Slate配置数据，并且在服务端实现Slate的运行逻辑。</p><h3 id="生成行为树节点播放Slate"><a href="#生成行为树节点播放Slate" class="headerlink" title="生成行为树节点播放Slate"></a>生成行为树节点播放Slate</h3><p>由于序列化生成Slate节点无法得到运行时Actor Group的GameObject，需要我们在运行时动态设置。Cutscene中提供了方法SetGroupActorOfName(string groupName, GameObject newActor)，该方法可以通过组名查找替换当前的GameObject。我们可以将Slate需要的Gameobject放在黑板数据中，运行时将黑板GameObject设置到CutScene中即可。</p><p>Play Slate的Task节点：</p><p><img src="C:\Users\huangyuancheng\Pictures\POPO20211218-170131_LI.jpg"></p><p>左侧Cutscene为序列化的Slate Prefab，图中Group Name为Actor Group中的组名，New Actor为黑板数据，运行该Task节点会将New Actor设置为Actor Group对应的GameObject。</p><p>Task节点部分代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnExecute() &#123;</span><br><span class="line"></span><br><span class="line">    if ( cutscene.value.isActive ) &#123;</span><br><span class="line">        EndAction();</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cutsceneInstance = cutsceneIsPrefab ? Object.Instantiate(cutscene.value) : cutscene.value;</span><br><span class="line"></span><br><span class="line">    foreach ( var replacement in replacementActors ) &#123;</span><br><span class="line">        if ( !string.IsNullOrEmpty(replacement.groupName) &amp;&amp; replacement.newActor.value != null ) &#123;</span><br><span class="line">            cutsceneInstance.SetGroupActorOfName(replacement.groupName, replacement.newActor.value);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cutsceneInstance.defaultStopMode = stopMode;</span><br><span class="line">    if ( waitActionFinish ) &#123;</span><br><span class="line">        cutsceneInstance.Play(startTime.value, cutsceneInstance.length, wrapMode, () =&gt; &#123; FinalizeCutscene(); EndAction(); &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        cutsceneInstance.Play(startTime.value, cutsceneInstance.length, wrapMode, () =&gt; &#123; FinalizeCutscene(); &#125;);</span><br><span class="line">        EndAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected override void OnStop() &#123;</span><br><span class="line">    if ( waitActionFinish &amp;&amp; cutscene.value.isActive ) &#123;</span><br><span class="line">        cutsceneInstance.Stop(stopMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h3><h4 id="共享黑板"><a href="#共享黑板" class="headerlink" title="共享黑板"></a>共享黑板</h4><p>可以通过共享行为树黑板的方式来实现数据传递。修改Slate代码，在Actor Group中添加BlackBoard变量，在初始化Slate节点时将行为树黑板传递进Actor Group。后续任何行为树的Task节点都可以直接访问行为树的黑板</p><p>Slate添加碰撞检测节点的代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CollisionActionClip</span> : <span class="title">ActorActionClip</span>&lt;<span class="title">Blackboard</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> BBName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;GameObject&gt; <span class="keyword">value</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.isPlaying)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">value</span> = Helper.Search(ActorGameObject.transform.position, <span class="number">10</span>, LayerMask.GetMask(<span class="string">&quot;Default&quot;</span>));</span><br><span class="line">            Blackboard.SetVariableValue(BBName, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> mRec = <span class="keyword">new</span> GameObject(<span class="string">&quot;temp&quot;</span>);</span><br><span class="line">            mRec.transform.localScale = Vector3.one;</span><br><span class="line">            UDrawTool tool;</span><br><span class="line">            tool = mRec.AddComponent&lt;UDrawTool&gt;();</span><br><span class="line">            tool.DrawCube(mRec.transform, Vector3.zero, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, Quaternion.identity, <span class="number">1f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h4><p>Slate向行为树发送event代码，支持发送各种类型的数据</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SendGraphEvent</span>&lt;<span class="title">T</span>&gt; : <span class="title">ActorActionClip</span>&lt;<span class="title">GraphOwner</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> eventName;</span><br><span class="line">    <span class="keyword">public</span> T eventValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( Application.isPlaying ) &#123;</span><br><span class="line">            actor.SendEvent(eventName, eventValue, root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Unity Slate插件是一个TimeLine编辑器。支持在时间轴上编辑镜头、Animation、音频、角色IK等各种功能，支持扩展各种自定义节点类型。同时对Node Canvas行为树的支持也非常友好，直接集成了向行为树发送事件节点。&lt;/p&gt;
&lt;p&gt;Slate使用界面：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/01/05/UE-AI/"/>
    <id>http://example.com/2022/01/05/UE-AI/</id>
    <published>2022-01-05T03:53:22.073Z</published>
    <updated>2022-03-04T09:22:50.361Z</updated>
    
    <content type="html"><![CDATA[<p>UE的一个AI一般包括一下几个部分：</p><ul><li><strong>Pawn:</strong> Pawn为AI角色；</li><li><strong>AI Controller:</strong>  AI Controller用于操控Pawn（与玩家的Palyer Controller相对应）；</li><li><strong>Behavior Tree:</strong>  行为树依据不用的情况来操纵AI Controller；</li><li><strong>Black Board</strong>:  黑板用于记录一系列变量数据，给行为树的决策提供依据。</li><li><strong>AI Perception</strong>: AI感知是actor component ，用于提供视觉，听觉，触觉等等感知，一般添加到AI Controller中</li></ul><p>UE4行为树由事件驱动，可以通过条件装饰器观察数值，并且在可以中止其他节点。</p><h3 id="AI-感知"><a href="#AI-感知" class="headerlink" title="AI 感知"></a>AI 感知</h3><p>默认的AI Perception Component提供了视觉、听觉的配置，可视觉配置的属性如下，可以配置AI 可视半径，可视角度等一系列属性。</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/1.png"></p><p>AI感知玩家并且设置黑板相关变量的简单例子：</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/2.png"></p><p>如果需要定义特定的AI感知，可以继承UAISense类来实现特定感知。</p><h3 id="服务节点"><a href="#服务节点" class="headerlink" title="服务节点"></a>服务节点</h3><p>服务节点是UE行为树的一种特殊功能，继承BTService_BlueprintBase，用于增加到Task节点或者复合节点，只要子节点在运行，服务节点就会以固定的频率tick，可以实现类似传统树的并行复合节点的功能，服务节点通过override Event Tick AI函数来实现特定的服务逻辑</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/3.png" alt="image-20220113184805288"></p><h3 id="场景查询系统（EQS）"><a href="#场景查询系统（EQS）" class="headerlink" title="场景查询系统（EQS）"></a>场景查询系统（EQS）</h3><p><strong>场景查询系统（EQS）</strong> 是UE4 AI系统的一个功能，可将其用于从环境中收集数据。在EQS中，可以通过不同种类的测试向收集的数据提问，这些测试会根据提出问题的类型来生成最适合的项目。</p><p>一次场景查询主要包括以下部分：</p><ul><li><strong>生成器（Generator）</strong>，用于生成位置或actor，生成的东西被称为项目（item）</li><li><strong>测试（Test）</strong>，为所有的item打分（过滤），最终可以得到最佳的item</li><li><strong>情景（Context）</strong>，为各种测试和生成器提供引用，例如为距离测试提供一个衡量距离的Actor</li></ul><p><strong>生成器</strong>：</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/4.png"></p><p>Actors of Class 生成一定范围内的actor作为item</p><p>Composite：合并多个生成器的结果</p><p>Points ：生成一定范围的点作为item</p><p><strong>Test</strong>：分为过滤测试（Filter）和评分（Socre）测试两类，过滤测试会移除未通过的item，评分测试会对所有的item评分，UE4中永远先进行过滤再进行评分。</p><p>UE中自带的测试包括距离测试、寻路测试、Trace测试等等，可以通过C++代码创建自定义测试。</p><p><strong>Context</strong>：为生成器和测试提供指定Context，一般用于提供特定的点或者特定的Actor</p><p>在生成器类型的 Details 面板中，可以将查询器指定为下列属性的情境，例如在Points:Grid生成器中，生成中心默认是查询者Actor自身，也可以指定为一个Context的actor</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/5.png"></p><p>新建一个Context：</p><ul><li>创建 <strong>EnvQueryContext_BlueprintBase</strong> 类的新蓝图</li><li>override Provide Single Location或Provide Single Actor函数</li></ul><h4 id="EQS调试"><a href="#EQS调试" class="headerlink" title="EQS调试"></a>EQS调试</h4><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/6.png" alt="image-20220105153536733"></p><p>单引号(‘)按键打开AI相关调试信息，默认是小键盘数字键1 2 3 4开关对应的调试信息，如果没有小键盘需要的project setting的gameplay debugger中修改按键</p><p>打开EQS调试，地面会标记当前EQS的查询结果，根据Environment Query规则给可选点进行打分，最终得到各个点的分值。</p><p><strong>EQSTestPawn</strong>：可用于在编辑器中调试EQS查询结果，图中显示了特定点在周围的得分，该规则是过滤看不到右下角玩家的点，距离当前位置越近得分越高，该规则可以筛选出可以看到指定玩家最近的点。</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/7.png" alt="image-20220105155823116"></p><p>用法：</p><ul><li><p>创建EQSTestingPawn类型的蓝图</p></li><li><p>设置EQSTestingPawn的Query Template为指定的查询规则</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/8.png" alt="image-20220117203904063"></p></li></ul><h3 id="AI-寻路"><a href="#AI-寻路" class="headerlink" title="AI 寻路"></a>AI 寻路</h3><h4 id="导航区域类型设置"><a href="#导航区域类型设置" class="headerlink" title="导航区域类型设置"></a>导航区域类型设置</h4><p>Nav Modifier Volume可以在地图中为Cube指定区域的类型，默认的类型如下：</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/9.png" alt="image-20220224144528524"></p><p>Nav_null意味着不可走， Nav_Obstacle意味将指定相较于默认值 NavArea_Default更高的成本，寻路会尽可能避开该区域，除非代理找不到成本更低的路径。</p><p>可以通过继承<strong>Nav Area</strong>来实现自定的区域类型，修改<strong>默认成本（Default Cost）</strong> 乘数和 <strong>固定区域进入成本（Fixed Area Entering Cost）</strong>来实现自定义区域属性。</p><h4 id="寻路查询筛选器（Navigation-Query-Filter）"><a href="#寻路查询筛选器（Navigation-Query-Filter）" class="headerlink" title="寻路查询筛选器（Navigation Query Filter）"></a>寻路查询筛选器（Navigation Query Filter）</h4><p>创建BP继承<strong>Navigation Query Filter</strong>，可以自定义所有导航区域的Cost，实现自定义导航路径的目的。</p><p>使用寻路查询筛选器的方式：</p><ul><li><p>在Ai Controller 的Class Default设置默认的Filter</p></li><li><p>获取Controller，调用Move To函数</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/10.png" alt="image-20220224151549030"></p></li></ul><h4 id="Navmesh生成的三种方式："><a href="#Navmesh生成的三种方式：" class="headerlink" title="Navmesh生成的三种方式："></a>Navmesh生成的三种方式：</h4><ul><li><strong>Static</strong>， 寻路网格体离线生成，随关卡保存。寻路网格体在运行时加载，无法更改。</li><li><strong>Dynamic</strong>，运行时动态生成，可以设置tick的时间</li><li><strong>Dynamic Modifiers Only</strong>， 在运行时，只有寻路区域、寻路链接和动态对象之类的寻路修饰可以通过更改成本或阻挡区域来修改现有寻路网格体。在运行时不会生成新的寻路网格体表面。</li></ul><p>以上生成方式可以在Project Setting或者recast中设置</p><p><strong>Nav Modifier</strong>组件可以在运行时动态的修改NavMesh生成的网格，在Actor中添加<strong>Nav Modifier</strong>组件，可以设置Actor的区域类型， 不过运行修改的特性仅支持Dynamic Modifiers Only和Dynamic的网格生成方式。</p><p><strong>设置（Settings） &gt; 项目设置（Project Settings）</strong>，并转到 <strong>寻路系统（Navigation System）</strong> 类别。启用 <strong>仅在寻路调用程序周围生成寻路（Generate Navigation Only Around Navigation Invokers）</strong> 复选框，启用后配合动态生成方式可以仅在添加了Navigation Invoker的Actor的周围生成寻路网格，无需在编辑器中构建寻路网格，而是在运行时在代理周围生成寻路网格。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="Nav-Link-Proxy"><a href="#Nav-Link-Proxy" class="headerlink" title="Nav Link Proxy"></a>Nav Link Proxy</h3><p>功能是在两个点之间创建Navmesh可以识别的连接，可以用于AI通过障碍物等特定地形的导航。</p><p><img src="https://gitee.com/nevermorec/photo-store/raw/master/AI/11.png" alt="image-20220121152252936"></p><p>Link类型：</p><ul><li><strong>SimpleLink</strong>，可以识别到连接，但是Agent不一定能够通过，例如无法实现从下往上跳跃的过程</li><li><strong>SmartLink</strong>，通过Event Receive SmartLink Reached来实现自定义AI速度、Play Montage等功能</li></ul><p>SmartLink实现跳跃的例子：</p><p><img src="C:\Users\huangyuancheng\Desktop\新建文件夹\AI\12.png"></p><p>Link可以指定通过方向</p><p>可以结合NavArea 、NavQueryFilter，标记实现不同Nav Link的Enable Nav Area，只允许特定的Nav Area拥有该连接信息，然后通过NavQueryFilter指定包括或者排除特定Nav Area，在路径选择过程中指定NavFilter，可以实现不同AI有不同的导航地图，不同的跳跃能力</p><p><a href="https://www.youtube.com/watch?v=5pMRqcRjC1k">https://www.youtube.com/watch?v=5pMRqcRjC1k</a></p><p><a href="https://www.youtube.com/watch?v=ECys4U2fOKs&amp;list=PL4G2bSPE_8ukuajpXPlAE47Yez7EAyKMu&amp;index=12">https://www.youtube.com/watch?v=ECys4U2fOKs&amp;list=PL4G2bSPE_8ukuajpXPlAE47Yez7EAyKMu&amp;index=12</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;UE的一个AI一般包括一下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pawn:&lt;/strong&gt; Pawn为AI角色；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI Controller:&lt;/strong&gt;  AI Controller用于操控Pawn（与玩家的Pal</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>追踪子弹的实现</title>
    <link href="http://example.com/2021/10/31/%E8%BF%BD%E8%B8%AA%E5%AD%90%E5%BC%B9%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2021/10/31/%E8%BF%BD%E8%B8%AA%E5%AD%90%E5%BC%B9%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-10-31T04:34:44.000Z</published>
    <updated>2021-10-31T04:47:38.082Z</updated>
    
    <content type="html"><![CDATA[<p>要实现一个BOSS可以发射追踪子弹，子弹可以自定义初始方向，需要在子弹运行过程中依据被追踪者的Position动态修改子弹的偏转方向。</p><p>实现思路：</p><p>计算当前距离的方向和子弹的方向的角度，依据转向速度动态修改子弹的rotation</p><p>关键参数：</p><ul><li>float RotSpeed;    &#x2F;&#x2F; 转向速度</li><li>GameObject mEntity;   &#x2F;&#x2F; 追踪Entity的当前Gameobject</li><li>GameObject mTarget;  &#x2F;&#x2F;被追踪者</li></ul><p>实现代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vector3 dir = (mTarget.transform.position + offset -mEntity.transform.position).normalized;</span><br><span class="line"></span><br><span class="line">float a = Vector3.Angle(mEntity.transform.forward, dir) / mRotSpeed;</span><br><span class="line"></span><br><span class="line">// rotate direction</span><br><span class="line">if (a &gt; 0.01f || a &lt; 0.01f)</span><br><span class="line">&#123;</span><br><span class="line">mEntity.transform.forward = Vector3.Slerp(mEntity.transform.forward, dir, fTick / a).normalized;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float dv = mAcc * fTick;</span><br><span class="line">Displace = (mSpeed + 0.5f * dv) * fTick * mEntity.transform.forward;</span><br><span class="line">mSpeed += dv;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要实现一个BOSS可以发射追踪子弹，子弹可以自定义初始方向，需要在子弹运行过程中依据被追踪者的Position动态修改子弹的偏转方向。&lt;/p&gt;
&lt;p&gt;实现思路：&lt;/p&gt;
&lt;p&gt;计算当前距离的方向和子弹的方向的角度，依据转向速度动态修改子弹的rotation&lt;/p&gt;
&lt;p&gt;关</summary>
      
    
    
    
    
    <category term="Game Play" scheme="http://example.com/tags/Game-Play/"/>
    
  </entry>
  
  <entry>
    <title>在Unity上实现按钮点击（短按）和长按操作</title>
    <link href="http://example.com/2021/08/29/%E5%9C%A8Unity%E4%B8%8A%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB%EF%BC%88%E7%9F%AD%E6%8C%89%EF%BC%89%E5%92%8C%E9%95%BF%E6%8C%89%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/08/29/%E5%9C%A8Unity%E4%B8%8A%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB%EF%BC%88%E7%9F%AD%E6%8C%89%EF%BC%89%E5%92%8C%E9%95%BF%E6%8C%89%E6%93%8D%E4%BD%9C/</id>
    <published>2021-08-29T02:15:52.000Z</published>
    <updated>2021-08-29T02:19:15.986Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中需要完成长按技能显示技能详情的功能，由于Unity的Button只有Click时间，所以button不足以实现这个的功能。</p><p>实现方式：使用图片作为技能显示，通过继承MonoBehaviour,IPointerDownHandler,IPointerUpHandler,IPointerExitHandler接口来获取鼠标在Image上的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 脚本位置：UGUI按钮组件身上</span><br><span class="line">/// 脚本功能：实现角色技能的短按（技能释放）/长按(显示技能详情)状态的判断</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line"> </span><br><span class="line">// 继承：按下，抬起和离开的三个接口</span><br><span class="line">public class OnSkillPressed :MonoBehaviour,IPointerDownHandler,IPointerUpHandler,IPointerExitHandler</span><br><span class="line">&#123;</span><br><span class="line">    public int skillIndex;</span><br><span class="line">    </span><br><span class="line">    // 延迟时间</span><br><span class="line">    private float delay = 0.5f;</span><br><span class="line"> </span><br><span class="line">    // 技能图标是否是按下状态</span><br><span class="line">    private bool isDown = false;</span><br><span class="line">    </span><br><span class="line">    // 技能图标是否已经触发长按操作</span><br><span class="line">    private bool isLongPress = false;</span><br><span class="line"> </span><br><span class="line">    // 按钮最后一次是被按住状态时候的时间</span><br><span class="line">    private float lastIsDownTime;</span><br><span class="line">    </span><br><span class="line">    private GameMsg gameMsg = GameMsg.Instance;</span><br><span class="line"> </span><br><span class="line">    void Update ()</span><br><span class="line">    &#123;</span><br><span class="line">        // 如果按钮是被按下状态</span><br><span class="line">        if (isDown &amp;&amp; (!isLongPress)) &#123;</span><br><span class="line">            // 当前时间 -  按钮最后一次被按下的时间 &gt; 延迟时间0.2秒</span><br><span class="line">            if (Time.time - lastIsDownTime &gt; delay) &#123;</span><br><span class="line">                // 触发长按方法</span><br><span class="line">                isLongPress = true;</span><br><span class="line">                Debug.Log(&quot;长按技能： &quot; + skillIndex.ToString());</span><br><span class="line">                gameMsg.SendMessage(GameMsgType.LongPressSkill, skillIndex);</span><br><span class="line">                // 记录按钮最后一次被按下的时间</span><br><span class="line">                // lastIsDownTime = Time.time; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 当按钮被按下后系统自动调用此方法</span><br><span class="line">    public void OnPointerDown (PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">        lastIsDownTime = Time.time;</span><br><span class="line">        isDown = true;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 当按钮抬起的时候自动调用此方法</span><br><span class="line">    public void OnPointerUp (PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">        if (Time.time - lastIsDownTime &lt; delay)</span><br><span class="line">        &#123;</span><br><span class="line">            // Debug.Log(&quot;短按技能（显示技能范围）： &quot; + skillIndex.ToString());</span><br><span class="line">            gameMsg.SendMessage(GameMsgType.TapSkill, skillIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            gameMsg.SendMessage(GameMsgType.LongPressSkillCancel);</span><br><span class="line">        &#125;</span><br><span class="line">        isDown = false;</span><br><span class="line">        isLongPress = false;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 当鼠标从按钮上离开的时候自动调用此方法</span><br><span class="line">    public void OnPointerExit (PointerEventData eventData)</span><br><span class="line">    &#123;</span><br><span class="line">        if (isLongPress) gameMsg.SendMessage(GameMsgType.LongPressSkillCancel);</span><br><span class="line">        isDown = false;</span><br><span class="line">        isLongPress = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在项目中需要完成长按技能显示技能详情的功能，由于Unity的Button只有Click时间，所以button不足以实现这个的功能。&lt;/p&gt;
&lt;p&gt;实现方式：使用图片作为技能显示，通过继承MonoBehaviour,IPointerDownHandler,IPointerUp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Bug</title>
    <link href="http://example.com/2021/08/28/Bug/"/>
    <id>http://example.com/2021/08/28/Bug/</id>
    <published>2021-08-28T15:50:30.000Z</published>
    <updated>2021-08-28T15:51:14.739Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客记录一下自己在unity开发过程种遇到的各种bug。</p><h1 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h1><p>我们unity项目中的游戏流程管理类使用了MonoSingleton的单例模式，会随场景一同初始化和销毁，这个类会在初始化的时候注册消息，在exit时候取消监听。然而项目采用的Gamemsg消息系统是普通单例模式，全局唯一，这导致场景退出时消息没有取消监听，Action也不会被销毁，当第二次加载场景时Gamemsg会触发上一个游戏流程管理类的Action导致报错。</p><p>目前的处理方式是，在场景销毁时清空所有消息的监听。另一个方式是Gamemsg也采用MonoSingleton的单例模式，但是我们项目在其余场景也会使用消息系统所以没有采取这种方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇博客记录一下自己在unity开发过程种遇到的各种bug。&lt;/p&gt;
&lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;(1)&quot;&gt;&lt;/a&gt;(1)&lt;/h1&gt;&lt;p&gt;我们unity项目中的游戏流程管理类使用了MonoSinglet</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简单的闪烁脚本</title>
    <link href="http://example.com/2021/08/23/%E7%AE%80%E5%8D%95%E7%9A%84%E9%97%AA%E7%83%81%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2021/08/23/%E7%AE%80%E5%8D%95%E7%9A%84%E9%97%AA%E7%83%81%E8%84%9A%E6%9C%AC/</id>
    <published>2021-08-23T13:39:30.000Z</published>
    <updated>2021-08-23T13:47:25.040Z</updated>
    
    <content type="html"><![CDATA[<p>场景：每次释放技能需要在确认前使得要消耗的行动点闪烁</p><p>实现思路：增加CanvasGroup，通过控制alpha值来实现闪烁 </p><p><a href="https://blog.csdn.net/qq_27489007/article/details/83745791">https://blog.csdn.net/qq_27489007/article/details/83745791</a></p><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class ShanShuoAnim : MonoBehaviour &#123;</span><br><span class="line"> </span><br><span class="line">    private float alpha = 0.2f;</span><br><span class="line">    private float alphaSpeed = 8f;</span><br><span class="line">    private bool isShow = true;//用来控制闪烁的内容</span><br><span class="line">    private CanvasGroup cg;</span><br><span class="line">    private bool isClick = false;//用来控制 彻底不需要走动画了</span><br><span class="line">    private Image shanImg;</span><br><span class="line">    public Sprite shan_sprite;  //外部传进来的</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        cg = this.transform.GetComponent&lt;CanvasGroup&gt;();</span><br><span class="line">        shanImg = this.transform.GetComponent&lt;Image&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (isClick)</span><br><span class="line">        &#123;</span><br><span class="line">            if (isShow)</span><br><span class="line">            &#123;</span><br><span class="line">                if (alpha != cg.alpha)</span><br><span class="line">                &#123;</span><br><span class="line">                    cg.alpha = Mathf.Lerp(cg.alpha, alpha, alphaSpeed * Time.deltaTime);  //这个方法表示的是一种简便过程 传入初始和想达到的</span><br><span class="line">                    if (Mathf.Abs(alpha - cg.alpha) &lt;= 0.01)</span><br><span class="line">                    &#123;</span><br><span class="line">                        //Debug.Log(&quot;更新2===&quot; + alpha + &quot;===&quot; + cg.alpha);</span><br><span class="line">                        cg.alpha = alpha; isShow = false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if (1 != cg.alpha)</span><br><span class="line">                &#123;</span><br><span class="line">                    cg.alpha = Mathf.Lerp(cg.alpha, 1, alphaSpeed * Time.deltaTime);  //这个方法表示的是一种简便过程 传入初始和想达到的</span><br><span class="line">                    if (Mathf.Abs(1 - cg.alpha) &lt;= 0.01)</span><br><span class="line">                    &#123;</span><br><span class="line">                        //Debug.Log(&quot;更新3===&quot; + alpha + &quot;===&quot; + cg.alpha);</span><br><span class="line">                        cg.alpha = 1; isShow = true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void ShowAnim()</span><br><span class="line">    &#123;</span><br><span class="line">        //alpha = 1;</span><br><span class="line">        isClick = true;</span><br><span class="line">        shanImg.sprite = shan_sprite;</span><br><span class="line">        //cg.blocksRaycasts = true;//可以和该UI对象交互</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void HideAnim()</span><br><span class="line">    &#123;</span><br><span class="line">        isClick = false;</span><br><span class="line">        //alpha = 0;</span><br><span class="line"> </span><br><span class="line">        //cg.blocksRaycasts = false;//不可以和该UI对象交互</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;场景：每次释放技能需要在确认前使得要消耗的行动点闪烁&lt;/p&gt;
&lt;p&gt;实现思路：增加CanvasGroup，通过控制alpha值来实现闪烁 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_27489007/article/details/8</summary>
      
    
    
    
    
  </entry>
  
</feed>
